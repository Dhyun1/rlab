loess_fitted$Days_after_First_Cases<-1:313
fulldata%>%
ggplot(aes(x=Days_after_First_Cases))+
geom_line(aes(y=비수도권.신규확진자))+
geom_line(aes(y=loess,colour="a"),data=loess_fitted)+
scale_color_discrete(name = "Model", labels = c("loess"))+
labs(x="Days after first cases",y="비수도권신규확진자",title="비수도권신규확진자(loess)")
ggsave(file="비수도권(0825)_loess.jpg",width=30,height=15)
ggsave(file="비수도권(1027)_loess.jpg",width=20,height=10)
dev.off()
#2-(d) GAM
#natural splines (df=2:5)
library(gam)
#2-(d) GAM
#natural splines (df=2:5)
library(gam)
cv<-rep(0,4)
df<-seq(2,5,by=1)
k <- 10
set.seed(1)
folds <- caret::createFolds(1:nrow(train1),k = 10,list = TRUE,returnTrain=FALSE)
df<-seq(2,5,by=1)
for (j in df){
for (i in seq_len(k)){ #i=1,2,3, .. ,9,10
fit<- gam(비수도권.신규확진자~ns(Days_after_First_Cases,j),data=train1[unlist(folds[-i]),])
val_i<-train1[unlist(folds[i]),]
pred <- predict(fit, newdata=list("Days_after_First_Cases"=val_i$Days_after_First_Cases)) #se=FALSE, no $fit required
mse[i] <- mean((pred - val_i$비수도권.신규확진자)^2)
}
cv[j-1]<- mean(mse)
}
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(df,cv) #choose df=5
gam1_fit<-glm(비수도권.신규확진자~ns(Days_after_First_Cases,5),data=train1)
gam1_train1_fitted<-gam1_fit$fitted.values
(training_MSE=mean((train1$비수도권.신규확진자-gam1_train1_fitted)^2))
gam1_test1_fitted<-predict(gam1_fit,newdata=list("Days_after_First_Cases"=test1$Days_after_First_Cases))
(test_MSE=mean((test1$비수도권.신규확진자-gam1_test1_fitted)^2))
gam1_fitted<-data.frame(c(gam1_train1_fitted,gam1_test1_fitted))
colnames(gam1_fitted)<-"gam1"
gam1_fitted$Days_after_First_Cases<-1:313
fulldata%>%
ggplot(aes(x=Days_after_First_Cases))+
geom_line(aes(y=비수도권.신규확진자))+
geom_line(aes(y=gam1,colour="a"),data=gam1_fitted)+
scale_color_discrete(name = "Model", labels = c("gam1"))+
labs(x="Days after first cases",y="비수도권신규확진자",title="비수도권신규확진자(gam1)")
ggsave(file="비수도권(1027)_gam1.jpg",width=20,height=10)
dev.off()
cut <- seq(2, 5, by = 1)
cv<-c(0,0,0,0)
set.seed(1)
for (i in cut){
train1$tmp <- cut(train1$Days_after_First_Cases,i)
step_fit = glm(비수도권.신규확진자~tmp, data = train1)
cv[i-1] <- cv.glm(train1,step_fit, K= 10)$delta[1]
}
par(mfrow=c(1,1))
par(mar=c(4,4,1,1))
plot(cut,cv) #cut=4
set.seed(1)
train1$tmp <- cut(train1$Days_after_First_Cases,4)
step_fit = glm(비수도권.신규확진자~tmp, data = train1)
step_train1_fitted<-step_fit$fitted.values
(training_MSE<-mean((train1$Days_after_First_Cases-step_train1_fitted)^2))
step_test1_fitted<-rep(49,94)
(test_MSE<-mean((test1$Days_after_First_Cases-step_test1_fitted)^2))
(step_train1_fitted<-step_fit$fitted.values)
nrow(test)
nrow(test1)
step_test1_fitted<-rep(30,31)
step_test1_fitted<-rep(30,31)
(test_MSE<-mean((test1$Days_after_First_Cases-step_test1_fitted)^2))
train1<-train1[,-3]
step_fitted<-data.frame(c(step_train1_fitted,step_test1_fitted))
colnames(step_fitted)<-"step"
step_fitted$Days_after_First_Cases<-1:313
fulldata%>%
ggplot(aes(x=Days_after_First_Cases))+
geom_line(aes(y=비수도권.신규확진자))+
geom_line(aes(y=step,colour="a"),data=step_fitted)+
scale_color_discrete(name = "Model", labels = c("step"))+
labs(x="Days after first cases",y="비수도권신규확진자",title="비수도권신규확진자(step)")
ggsave(file="비수도권(0825)_step.jpg",width=30,height=15)
ggsave(file="비수도권(1027)_step.jpg",width=20,height=10)
dev.off()
#poisson regression
poisson_fit = glm(비수도권.신규확진자~Days_after_First_Cases, family = 'poisson', data = train1, maxit = 100)
poisson_train1_fitted<-poisson_fit$fitted.values
(training_MSE<-mean((train1$비수도권.신규확진자-poisson_train1_fitted)^2))
poisson_test1_fitted<-predict(poisson_fit,data.frame("Days_after_First_Cases"=test1$Days_after_First_Cases),
type = "r")
(test_MSE<-mean((test1$비수도권.신규확진자-poisson_test1_fitted)^2))
poisson_fitted<-data.frame(c(poisson_train1_fitted,poisson_test1_fitted))
colnames(poisson_fitted)<-"poisson"
poisson_fitted$Days_after_First_Cases<-1:313
fulldata%>%
ggplot(aes(x=Days_after_First_Cases))+
geom_line(aes(y=비수도권.신규확진자))+
geom_line(aes(y=poisson,colour="a"),data=poisson_fitted)+
scale_color_discrete(name = "Model", labels = c("poisson"))+
labs(x="Days after first cases",y="비수도권신규확진자",title="비수도권신규확진자(poisson)")
ggsave(file="비수도권(1027)_poisson.jpg",width=20,height=10)
dev.off()
#plot all fitted values for entire data set for each model
fulldata%>%
ggplot(aes(x=Days_after_First_Cases))+
geom_line(aes(y=비수도권.신규확진자))+
geom_line(aes(y=poly,colour="a"),data=poly_fitted,)+
geom_line(aes(y=smooth,colour="b"),data=smooth_fitted)+
geom_line(aes(y=loess,colour="c"),data=loess_fitted)+
geom_line(aes(y=gam1,colour="d"),data=gam1_fitted)+
geom_line(aes(y=step,colour="e"),data=step_fitted)+
geom_line(aes(y=poisson,colour="f"),data=poisson_fitted)+
scale_color_discrete(name = "Model", labels = c("poly","smooth","loess","gam1","step","poisson"))+
labs(x="Days after first cases",y="비수도권신규확진자",title="비수도권신규확진자(종합)")+
coord_cartesian(ylim=c(0,1000))
ggsave(file="비수도권(1027).jpg",width=20,height=10)
dev.off()
dev.off() #plot
rm(list=ls()) #variable
cat("\014") #console
library(readxl)
library(dplyr)
library(tseries)
library(stringr)
library(ggplot2)
library(spc)
getwd()
setwd("C:/Users/DaeHyun/Desktop/Study/●Quality Control")
jeju<-read_xls("./report/Passengers_Jeju.xls",skip=2)
names(jeju)<-c("Airport","Year","Month",
"flights.arrival.","flights.departure.", "flights.total.",
"passengers.arrival.","passengers.departure.", "passengers.total.",
"cargos.arrival.", "cargos.departure.", "cargos.total.")
###1. Data Preprocessing
#(1) delete strange rows
jeju<-jeju%>%
filter(!is.na(Month),!is.na(Year))
#(2) remove unnecessary and rename columns
passengers<-jeju%>%
select(Year:Month,passengers.arrival.:passengers.total.)%>%
rename(arrival=passengers.arrival.,departure=passengers.departure.,total=passengers.total.)
head(passengers)
###1. Data Preprocessing
#(1) delete strange rows
jeju<-jeju%>%
filter(!is.na(Month),!is.na(Year))
jeju<-read_xls("./report/Passengers_Jeju.xls",skip=2)
names(jeju)<-c("Airport","Year","Month",
"flights.arrival.","flights.departure.", "flights.total.",
"passengers.arrival.","passengers.departure.", "passengers.total.",
"cargos.arrival.", "cargos.departure.", "cargos.total.")
###1. Data Preprocessing
#(1) delete strange rows
jeju<-jeju%>%
filter(!is.na(Month),!is.na(Year))
#(2) remove and rename some columns
passengers<-jeju%>%
select(Year:Month,passengers.arrival.:passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
#(2) remove and rename some columns
passengers<-jeju%>%
select(Year:Month,passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
#1. Model based approach
#(1) Use time series model
# 1) create time series data
passengers_ts<- ts(passengers,start=c(2014,1),end=c(2020,10),frequency=12)
par(mfrow=c(1,2),mar=c(4, 4, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
# 2) plot time series data
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
par(mfrow=c(1,2),mar=c(4, 4, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
# 2) plot time series data
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4, 4, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
plot(passengers_ts,xlab="Time",ylab="Passengers")
plot(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
plot(passengers_ts,xlab="Time",ylab="Passengers")
plot(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(1,1),mar=c(4, 4, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
plot(passengers_ts,xlab="Time",ylab="Passengers")
plot(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
plot(passengers_ts,xlab="Time",ylab="Passengers")
# 2) plot time series data
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
#1. Model based approach
#(1) Use time series model
# 1) create time series data
passengers_ts<- ts(passengers,start=c(2014,1),end=c(2020,10),frequency=12)
# 2) plot time series data
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
#1. Model based approach
#(1) Use time series model
# 1) create time series data
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
# 2) plot time series data
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4, 4, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(3, 3, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(2, 2, 2, 1),oma=c(0.5, 0.5, 2, 0.5))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(2, 2, 2, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(3, 3, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4, 4, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4.5, 4.5, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
plot.ts(sqrt(passengers_ts),xlab="Time",ylab="log(Passengers)") #do log transformation
plot.ts(sqrt(passengers_ts),xlab="Time",ylab="sqrt(Passengers)") #do log transformation
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
plot.ts(sqrt(passengers_ts),xlab="Time",ylab="sqrt(Passengers)") #do log transformation
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
#(2) remove and rename some columns
passengers<-jeju%>%
select(passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
#1. Model based approach
#(1) Use time series model
# 1) create time series data
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
# 2) plot time series data
lambda <- BoxCox.lambda(passengers$total)
library(forecast)
#1. Model based approach
#(1) Use time series model
# 1) create time series data
passengers_ts<- ts(passengers,start=c(2014,1),end=c(2020,10),frequency=12)
BoxCox.lambda(passengers)
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
lambda<-BoxCox.lambda(passengers)
lambda<-BoxCox(passengers, 1)
lambda<-BoxCox.lambda(passengers)
passengers_lmda<-BoxCox(passengers, 1)
passengers_lambda<-BoxCox(passengers, 1)
passengers_lambda
passengers_ts
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4.5, 4.5, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
png("transformation.png")
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4.5, 4.5, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
jpeg(filename = "tseries transformation(log).jpg",)
jpeg(filename = "tseries transformation(log).jpg")
getwd()
setwd("C:/Users/DaeHyun/Desktop/Study/●Quality Control/report")
setwd("C:/Users/DaeHyun/Desktop/Study/●Quality Control/report")
jeju<-read_xls("./Passengers_Jeju.xls",skip=2)
names(jeju)<-c("Airport","Year","Month",
"flights.arrival.","flights.departure.", "flights.total.",
"passengers.arrival.","passengers.departure.", "passengers.total.",
"cargos.arrival.", "cargos.departure.", "cargos.total.")
###1. Data Preprocessing
#(1) delete strange rows
jeju<-jeju%>%
filter(!is.na(Month),!is.na(Year))
#(2) remove and rename some columns
passengers<-jeju%>%
select(passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
#1. Model based approach
#(1) Use time series model
# 1) create time series data
passengers_ts<- ts(passengers,start=c(2014,1),end=c(2020,10),frequency=12)
lambda<-BoxCox.lambda(passengers) #lambda=1, no meaning of Box-Cox transformation
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4.5, 4.5, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
jpeg(filename = "tseries transformation(log).jpg")
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
mtext("Monthly total passengers of Jeju International Airport", outer = TRUE, cex = 2)
# 3) decompose and plot factors
plot(decompose(passengers_ts))
dev.off()
# 2) plot time series data
par(mfrow=c(2,1),mar=c(4.5, 4.5, 0, 1),oma=c(0, 0, 0, 0))
plot.ts(passengers_ts,xlab="Time",ylab="Passengers")
plot.ts(log(passengers_ts),xlab="Time",ylab="log(Passengers)")
jpeg(filename = "tseries transformation(log).jpg")
dev.off()
# 3) decompose and plot factors
plot(decompose(passengers_ts))
names(jeju)
#(2) remove and rename some columns
passengers<-jeju%>%
select(Year:Month,passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
sum(is.na(jeju))
#(2) remove and rename some columns
passengers<-jeju%>%
select(Year:Month,passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
###II-2. EDA
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
plot(passengers_ts)
par(mfrow=c(1,1))
plot(passengers_ts)
plot(passengers_ts,ylab="Passengers")
s
passengers_ts%>%
ggplot(aes(x=Time,y=Passengers))+
geom_line(group=1)
passengers_ts
head(passengers)
###II-2. EDA
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
par(mfrow=c(1,1))
plot(passengers_ts,ylab="Passengers")
passengers%>%
ggplot(aes(x=Month,y=total))+
geom_boxplot()
passengers%>%
ggplot(aes(x=Month,y=total))+
geom_boxplot(group=1)
passengers%>%
ggplot(aes(x=Month,y=total))+
geom_boxplot(group=Month)
passengers%>%
ggplot(aes(x=Month,y=total))+
geom_boxplot(aes(group=Month))
passengers%>%
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))+
labs(ylab="Passengers",xlab="Month")
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))+
labs(xlab="Month",ylab="Passengers")
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))+
labs(x="Month",y="Passengers")
passengers%>%
filter(Month==4)%>%
arrange(total)
passengers%>%
filter(Month==4)%>%
arrange(total)%>%
head()
png("EDA(1).png")
png(filename="EDA(1).png")
###II-2. EDA
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
par(mfrow=c(1,1))
plot(passengers_ts,ylab="Passengers")
png(filename="EDA(1).png")
dev.off()
###II-2. EDA
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
par(mfrow=c(1,1))
plot(passengers_ts,ylab="Passengers")
png(filename="EDA(1).png")
dev.off()
par(mfrow=c(1,1))
dev.new()
par(mfrow=c(1,1))
plot(passengers_ts,ylab="Passengers")
png(filename="EDA(1).png")
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))+
labs(x="Month",y="Passengers")
library(readxl)
library(dplyr)
library(tseries)
library(stringr)
library(ggplot2)
library(spc)
library(forecast)
getwd()
setwd("C:/Users/DaeHyun/Desktop/Study/●Quality Control/report")
jeju<-read_xls("./Passengers_Jeju.xls",skip=2)
names(jeju)<-c("Airport","Year","Month",
"flights.arrival.","flights.departure.", "flights.total.",
"passengers.arrival.","passengers.departure.", "passengers.total.",
"cargos.arrival.", "cargos.departure.", "cargos.total.")
###II-1. check missing value, Data Preprocessing
#(1) delete strange rows, check NAs
jeju<-jeju%>%
filter(!is.na(Month),!is.na(Year))
sum(is.na(jeju))
#(2) remove and rename some columns
passengers<-jeju%>%
select(Year:Month,passengers.total.)%>%
rename(total=passengers.total.)
head(passengers)
###II-2. EDA
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),frequency=12)
par(mfrow=c(1,1))
plot(passengers_ts,ylab="Passengers")
png(filename="EDA1.png")
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))+
labs(x="Month",y="Passengers")
dev.off()
dev.new()
passengers%>%
ggplot(aes(x=factor(Month),y=total))+
geom_boxplot(aes(group=factor(Month)))+
labs(x="Month",y="Passengers")
library(readxl)
library(dplyr)
library(tseries)
library(stringr)
library(ggplot2)
library(spc)
library(forecast)
library(ggfortify)
#paste Month+year
Month_2014to2019<-sapply(2014:2019,function(x){
return (paste(x,str_sub(month.name,1,3),sep=""))
})
Month_2020<-paste(2020,str_sub(month.name[1:10],1,3),sep="")
Month<-factor(c(Month_2014to2019,Month_2020))
#title centering
theme_update(plot.title = element_text(hjust = 0.5))
EWMA<-function(data,L,lambda,mu,sigma){
Z<-UCL<-LCL<-vector("double",length(data))
n=length(data)
for (i in 1:n){
constant=lambda*(1-(1-lambda)^(2*i))/(2-lambda)
UCL[i]<-mu+L*sigma*sqrt(constant)
LCL[i]<-mu-L*sigma*sqrt(constant)
Z[i]<-lambda*data[i]+(1-lambda)*(ifelse(i==1,mu,Z[i-1]))
}
return (list("Z"=Z,"UCL"=UCL,"LCL"=LCL,"index"=1:length(data)))
}
getwd()
setwd("C:/Users/DaeHyun/Desktop/Study/●Quality Control/report")
jeju<-read_xls("./Passengers_Jeju.xls",skip=2)
names(jeju)<-c("Airport","Year","Month",
"flights.arrival.","flights.departure.", "flights.total.",
"passengers.arrival.","passengers.departure.", "passengers.total.",
"cargos.arrival.", "cargos.departure.", "cargos.total.")
###II-1. check missing value, Data Preprocessing
#(1) delete strange rows, check NAs
jeju<-jeju%>%
filter(!is.na(Month),!is.na(Year))
#(2) remove and rename some columns
passengers<-jeju%>%
dplyr::select(Year:Month,passengers.total.)%>%
dplyr::rename(total=passengers.total.)
#(3) EDA
passengers_ts<- ts(passengers$total,start=c(2014,1),end=c(2020,10),
frequency=12)
#1. Model based approach
#(1) fit time series model for Phase I data
# 1) Box-cox transformation
passengers_phase1<- ts(passengers$total,start=c(2014,1),end=c(2020,1),
frequency=12)
(lambda<-BoxCox.lambda(passengers_phase1)) #lambda=1.6
passengers_new<-BoxCox(passengers_phase1, lambda)
# 2) plot data(transformed, not transformed), choose what to use in analysis
par(mfrow=c(1,1),mar=c(4.5, 4.5, 0, 1))
plot.ts(passengers_new,xlab="Time",ylab="Passengers(box-cox lambda=1.6")
# 3) decompose data
plot(decompose(passengers_new))
#Dickey-Fuller test to check mean stationary
adf.test(passengers_new)
# 6) auto.arima() : find best ARIMA model
(arima_fit_season<-auto.arima(passengers_new,stepwise=FALSE,approximation=FALSE))
# 7) plot residuals and conduct portmanteau test
passengers_new %>%
Arima(order=c(0,1,1), seasonal=c(0,1,1)) %>%
residuals() %>% ggtsdisplay()
checkresiduals(arima_fit_season)
